function [fig_handle, image_handle, bar_handle] = ...
   viewimage (img, update, colourbar, uiflag)

% VIEWIMAGE  displays a PET image from a vector or square matrix.
%
%    [fig_handle, image_handle, bar_handle] = ...
%        viewimage (img [, update [, colourbar_flag [, uiflag]]])
%
%  viewimage (img) displays an image using the MATLAB image function.
%  Works on either colour or monochrome displays.
%
%  Images are scaled so that the high points are white and the low
%  points black.
%
%  viewimage (img, update) chooses the update mode.  The default is to erase
%  all elements of the figure window, and recreate everything.  By
%  specifying update = 1, only the image itself will be changed.
%
%  viewimage (img, [], colourbar_flag) turns the colourbar on or off.
%  The default is on, but by specifying colourbar flag = 0, the
%  colourbar will be turned off.
%

%  Copyright 1993,1994 Mark Wolforth and Greg Ward, McConnell Brain
%  Imaging Centre, Montreal Neurological Institute, McGill
%  University.
%  Permission to use, copy, modify, and distribute this
%  software and its documentation for any purpose and without
%  fee is hereby granted, provided that the above copyright
%  notice appear in all copies.  The authors and McGill University
%  make no representations about the suitability of this
%  software for any purpose.  It is provided "as is" without
%  express or implied warranty.


if (nargin < 1)
  help viewimage
  error ('Too few input arguments.');
elseif (nargin == 1)
  update = 0;
  colourbar = 1;
  uiflag = 1;
elseif (nargin == 2)
  colourbar = 1;
  uiflag = 1;
  if (length (update) == 0)
    update = 0;
  end;
elseif (nargin == 3)
  uiflag = 1;
elseif (nargin > 4)
  error ('Too many input arguments');
end    

% Reshape the image appropriately
[x,y] = size (img);

if ((x > 1) & (y > 1))
    xsize = x;
else
    xsize= x^.5;
    if (xsize ~= floor (xsize))
        error('Image must be square.');
    end
    if (y ~= 1)
        error('Image must be a vector if not square.');
    end
    img = reshape (img, xsize, xsize);
end

% If any NaN's or infinities are present in the image, find the min/max
% of the image *without* them, and assign them all to the minimum -- that 
% way they will display as black.

nuke = (isnan (img) | isinf (img));
if any (any (nuke))
  lo = min(img(~nuke));
  hi = max(img(~nuke));
  disp ('viewimage warning: image contains NaN''s and/or infinities');
  nuke = find(nuke);
  img(nuke) = zeros (size (nuke));
else
  lo = min(min(img));
  hi = max(max(img));
end


% Set the default colourmap, and shift/scale img so that it maps onto
% 1..length(colourmap).  We have different setups depending on whether
% or not we are diplaying in colour.

if (~update)

  % Clean everything off the current figure
  delete(get(gcf,'Children'));
  
  if (get (0, 'ScreenDepth') > 1)
    default_colormap = ['spectral'];
    
    if (uiflag)    
      s = ['colormap(spectral);'...
	      'handles = get(gcf,''UserData'');'...
	      'set(handles(1),''UserData'',spectral);'...
	      'if (handles(3)>0),'...
		'set(handles(3),''value'',1);'...
	      'end;'...
	      'if (handles(4)>0),'...
		'set(handles(4),''value'',0);'...
	      'end;'];
      uicontrol('Units','normal','Position',[.84 0.69 .14 .04], ...
	  'String','Spectral','callback',s)
      h = ['colormap(hotmetal);'...
	      'handles = get(gcf,''UserData'');'...
	      'set(handles(1),''UserData'',hotmetal);'...
	      'if (handles(3)>0),'...
		'set(handles(3),''value'',1);'...
	      'end;'...
	      'if (handles(4)>0),'...
		'set(handles(4),''value'',0);'...
	      'end;'];
      uicontrol('Units','normal','Position',[.84 0.63 .14 .04], ...
	  'String','Hot','callback',h)
      g = ['colormap(gray);'...
	      'handles = get(gcf,''UserData'');'...
	      'set(handles(1),''UserData'',gray);'...
	      'if (handles(3)>0),'...
		'set(handles(3),''value'',1);'...
	      'end;'...
	      'if (handles(4)>0),'...
		'set(handles(4),''value'',0);'...
	      'end;'];
      uicontrol('Units','normal','Position',[.84 0.57 .14 .04], ...
	  'String','Gray','callback',g)
      ge = ['colormap(gecolour);'...
	      'handles = get(gcf,''UserData'');'...
	      'set(handles(1),''UserData'',gecolour);'...
	      'if (handles(3)>0),'...
		'set(handles(3),''value'',1);'...
	      'end;'...
	      'if (handles(4)>0),'...
		'set(handles(4),''value'',0);'...
	      'end;'];
      uicontrol('Units','normal','Position',[.84 0.51 .14 .04], ...
	  'String','GE colour','callback',ge)

      u = ['handles = get(gcf,''UserData'');'...
	      'co = get(handles(1),''UserData'');'...
	      'newmap = brighten(co,0.3);'...
	      'set(handles(1),''UserData'',newmap);'...
	      'if (handles(3) > 0),'...
		'upperthresh = get(handles(3), ''value'');' ...
		'lowerthresh = get(handles(4), ''value'');' ...
		'end;'...
	      'threshimage (upperthresh, lowerthresh, newmap);'];
      uicontrol('Units','normal','Position',[.84 0.16 .14 .04], ...
	  'String','Bright','callback',u)
      l = ['handles = get(gcf,''UserData'');'...
	      'co = get(handles(1),''UserData'');'...
	      'newmap = brighten(co,-0.3);'...
	      'set(handles(1),''UserData'',newmap);'...
	      'if (handles(3) > 0),'...
		'upperthresh = get(handles(3), ''value'');' ...
		'lowerthresh = get(handles(4), ''value'');' ...
		'end;'...
	      'threshimage (upperthresh, lowerthresh, newmap);'];
      uicontrol('Units','normal','Position',[.84 0.10 .14 .04], ...
	  'String','Dark','callback',l)
    end
  else
    default_colormap = ['gray .^ 1.5'];

    if (uiflag)    
      u = ['brighten(0.3);'];
      uicontrol('Units','normal','Position',[.84 0.69 .14 .04], ...
	  'String','Bright','callback',u)
      l = ['brighten(-0.3);'];
      uicontrol('Units','normal','Position',[.84 0.63 .14 .04], ...
	  'String','Dark','callback',l)
      eval (['def = [''colormap (' default_colormap ');''];']);
      uicontrol('Units','normal','Position',[.84 0.57 .14 .04], ...
	  'String','Default','callback',def)
    end
  end

  eval(['colormap(' default_colormap ');']);
  
  %
  % Set up the thresholding sliders
  %

  upper_cmd = ['handles = get(gcf, ''UserData'');' ...
	  'upperthresh = get(handles(3), ''value'');' ...
	  'lowerthresh = get(handles(4), ''value'');' ...
	  'if (lowerthresh>upperthresh),' ...
	    'set(handles(4),''value'',upperthresh);' ...
	    'lowerthresh=upperthresh;' ...
	  'end;'...
	  'co = get(handles(1),''UserData'');'...
	  'threshimage (upperthresh, lowerthresh, co);'];

  lower_cmd = ['handles = get(gcf, ''UserData'');' ...
	  'upperthresh = get(handles(3), ''value'');' ...
	  'lowerthresh = get(handles(4), ''value'');' ...
	  'if (upperthresh<lowerthresh),' ...
	    'set(handles(3),''value'',lowerthresh);' ...
	    'upperthresh=lowerthresh;' ...
	  'end;'...
	  'co = get(handles(1),''UserData'');'...
	  'threshimage (upperthresh, lowerthresh, co);'];

  upper_slide = uicontrol ('Style','slider','min',0,'max',1,'value',1,...
      'Units','normal','Position',[.84 .82 .14 .05],'Callback',upper_cmd);
  lower_slide = uicontrol ('Style','slider','min',0,'max',1,'value',0,...
      'Units','normal','Position',[.84 .75 .14 .05],'Callback',lower_cmd);


  %
  % Set up a zoom on/off pushbutton if we find the image
  % processing toolbox
  %
  
  if (exist('imzoom') == 2)
    imzoom ('off');
    uicontrol('Units','normal','Position',[.84 .22 .14 .04],...
	'Style','checkbox','callback','imzoom','String','Zoom');
  end


  %
  % Set up a blurring button
  %
  
  %  blur_call = ['handles = get(gcf,''UserData'');'...
  %  'im_handle = get(handles(1),''Children'');'...
  %  'Data = get(im_handle,''CData'');'...
  %  'kern = kernel(20);'...
  %  'lo = min(get(handles(2),''UserData''));'...
  %  'hi = max(get(handles(2),''UserData''));'...
  %  'Data = (Data/max(max(Data)))*hi;'...	  
  %  'NewData = conv2(Data,kern,''same'');'...
  %  'num_colors = length (colormap);'...
  %  'lo = min(min(NewData));'...
  %  'hi = max(max(NewData));'...
  %  'NewData = ((NewData - lo) * ((num_colors-1) / (hi-lo))) + 1;'...
  %  'tlabels=[];'...
  %  'if (handles(2)>0),'...
  %  'lab = linspace(lo, hi, 9);'...
  %  'for i=1:9,'...
  %  'tlabels = str2mat(tlabels,num2str(lab(i)));'...
  %  'end;'...
  %  'tlabels(1,:)=[];'...
  %  'set(handles(2),''Yticklabels'', tlabels);'...
  %  'end;'...
  %  'set (im_handle,''CData'',NewData);'];
  %  uicontrol('Units','normal','Position',[.84,.28,.14,.04],...
  %  'String','Blur','callback',blur_call);
  %  

else
  upper_slide = -1;
  lower_slide = -1;
end

num_colors = length (colormap);
img = ((img - lo) * ((num_colors-1) / (hi-lo))) + 1;

% Now display it, and fix the y-axis to normal (rather than reverse) dir.

fig_handle = gcf;

% Draw a colourbar beside the image
  
if (colourbar)

  if (~update)
    bar_handle = subplot(1,2,2);
    image((1:num_colors)');
    axis('xy');
    yticks = linspace (0, num_colors, 9);
    set(bar_handle,'Xticklabels',[],'Ytick',yticks, ...
	'Position',[.78,.1,.03,.8]);
  else

    %
    % Retrieve the colourbar handle, so that we can update it
    %
    
    handles = get (gcf,'UserData');
    bar_handle = handles(2);
    if (bar_handle == -1)
      error ('Request to update colourbar, but no colourbar exists!');
    end
    
  end

  lab = linspace(lo, hi, 9);
  for i=1:9,
    labels = str2mat(labels,num2str(lab(i)));
  end;
  labels(1,:)=[];
  set(bar_handle,'Yticklabels', labels);
  %  set(bar_handle,'UserData',lab);
else
  bar_handle = -1;
end

% We draw the image last so that it will be the
% current axis

image_handle = subplot(1,2,1);
image (img');

%
% Save the colormap values
%

if (~update)
  set (image_handle, 'UserData', colormap);
end

% Set the direction of the axes to what we're used to, and
% make the aspect ratio square
axis('xy','square');

% Make the main image a reasonable size
set(image_handle,'Position', [.05, .1, .6, .75]);

%
% Save all the handles in the UserData field of the figure
%

set (gcf,'UserData',[image_handle, bar_handle, ...
	upper_slide, lower_slide]);
